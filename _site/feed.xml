<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>“pkokp8's Blog” - Articles</title>
		<description>只想在这个世界多搬点砖，如果能造一块那就太好了</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.articles.xml" rel="self" type="application/rss+xml" />
		
			
			<item>
				<title>git的简单操作</title>
				
					<description>&lt;p&gt;
  记录一下git的使用。系统是ubuntu16.04. 安装好git环境  
  首先在github上右上角点一下+，然后New repository。  
  也可以本地创建好后push上去，不过这样也挺方便的。初学者嘛
&lt;/p&gt;




&lt;p&gt;
  然后是clone一个master，例如刚才创建的pkokp8.github.io.git分支
&lt;/p&gt;


&lt;pre&gt;
# git clone https://github.com/pkokp8/pkokp8.github.io.git
&lt;/pre&gt;




&lt;p&gt;接着就可以修改、提交文件&lt;/p&gt;


&lt;pre&gt;
# echo &quot;# test info&quot; &gt;&gt; README.md           #新建README.md
# git add .                                 #本地仓库新增这个文件
# git commit -m &quot;commit the readme&quot;         #提交到本地，日志为-m后面&quot;&quot;内的字符串
# git push -u origin master                 #push到远程主线。此时可以使用reset来回退代码，这样远端就不会有这次commit的记录
&lt;/pre&gt;




&lt;p&gt;
  此时可能因为没有用户名和密码，会提示错误。可以配置后再执行上述命令
&lt;/p&gt;




&lt;pre&gt;
# git config --global user.name &quot;pkokp8&quot;
# git config --global user.email &quot;xxx@xx.com&quot;
&lt;/pre&gt;




&lt;p&gt;
  查看本地的提交记录，简单的可以使用。配合reset可以回退版本。注意-hard会把本地修改覆盖掉。  
  类似svn的svn revert ./ -R;svn up -r xxx
&lt;/p&gt;


&lt;pre&gt;
# git log
commit af17a9f424c5da5b4b06f90e69eb069f89124e40
Author: pkokp8 &lt;xxx@xx.com&gt;
Date:   Thu Mar 1 00:23:55 2018 +0800

    modify readme

# git reset -hard af17a9f424c5da5b4b06f90e69eb069f89124e40 
&lt;/pre&gt;




&lt;p&gt;
  接着就可以创建分支了：
&lt;/p&gt;


&lt;pre&gt;
# git branch firstversion                   #创建名为firstversion的分支
# git checkout firstversion                 #切换到这个分支
# git push -u origin firstversion           #把这个分支push到远端
# git checkout master                       #切换回主线
# git branch                                #查看当前处于哪条分支（看*），以及存在哪些分支
  firstversion
* master
# git diff                                  #查看本地与本地仓库之间的差异
&lt;/pre&gt;




&lt;p&gt;
  暂时就用到这么多。我感觉我还是要学习一个
&lt;/p&gt;

</description>
				
				<pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/git-simple-use</link>
				<guid isPermaLink="true">http://localhost:4000/git-simple-use</guid>
			</item>
			
		
			
			<item>
				<title>复制一个list</title>
				
					<description>&lt;p&gt;初学python，爬图片的时候想复制一个list。一开始以为可以直接用这种方式复制list：
&lt;/p&gt;




&lt;pre&gt;
lista=[xxx, yyy, zzz]
listb=lista
&lt;/pre&gt;




&lt;p&gt;后来发现修改listb后lista的值也被修改了。原因是实际上listb就是lista。&lt;/p&gt;


&lt;p&gt;可以尝试用id函数打印出两个list的内存地址:&lt;/p&gt;


&lt;pre&gt;
lista = [0, 1, 2, 3, 4]
print(&quot;%s %s&quot; % (lista, id(lista)))

listb = lista
print(&quot;%s %s&quot; % (listb, id(listb)))

=============================
[0, 1, 2, 3, 4] 8246256
[0, 1, 2, 3, 4] 8246256

&lt;/pre&gt;




&lt;p&gt;
看得出，id相同。说明了两个list其实是同一个引用，这肯定不行。目的是为了新建一个list，同时修改新建的list不影响之前的list    
&lt;/p&gt;


&lt;p&gt;
有一种办法很粗暴：for循环遍历旧的list，新建一个空list，然后通过append方法把每一个元素添加进新的list。于是代码就是：
&lt;/p&gt;


&lt;pre&gt;
listnew=[]
for i in listold:
    listnew.append(i)
&lt;/pre&gt;


&lt;p&gt;
这个方法类似于在c语言中写出这样的代码:
&lt;/p&gt;


&lt;pre&gt;
char old[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
char new[10];
int i = 0;
for(i = 0;i &lt; sizeof(old)/sizeof(char); i++)
{
    new[i] = old[i];
}
&lt;/pre&gt;


&lt;p&gt;你退群吧。除非要对数组每个成员进行处理，否则遍历有什么意义，memcpy()不行吗？&lt;/p&gt;


&lt;p&gt;而对于python来说，复制一个list有一些巧妙方法，例如：&lt;/p&gt;


&lt;pre&gt;
listnew = listold*1
&lt;/pre&gt;


&lt;p&gt;这里举点其他方法的例子：&lt;/p&gt;


&lt;pre&gt;
lista = [0, 1, 2, 3, 4]
print(&quot;a %s %s&quot; % (lista, id(lista)))

lista_ = lista                  #实际没有复制
print(&quot;a_ %s %s&quot; % (lista_, id(lista_)))

'''
以下是复制
'''

listb = lista*1
print(&quot;b %s %s&quot; % (listb, id(listb)))

listc=[]
for i in lista:
    listc.append(i)             #append方法
print(&quot;c %s %s&quot; % (listc, id(listc)))

listd=[]
listd=lista[:]                  #slice
print(&quot;d %s %s&quot; % (listd, id(listd)))

import copy
liste = copy.copy(lista)
print(&quot;e %s %s&quot; % (liste, id(liste)))

listf = [i for i in lista]          #列表生成式
print(&quot;f %s %s&quot; % (listf, id(listf)))


========================================
a [0, 1, 2, 3, 4] 40817648
a_ [0, 1, 2, 3, 4] 40817648
b [0, 1, 2, 3, 4] 40735088
c [0, 1, 2, 3, 4] 40817568
d [0, 1, 2, 3, 4] 40818648
e [0, 1, 2, 3, 4] 40818008
f [0, 1, 2, 3, 4] 40819608
&lt;/pre&gt;


&lt;p&gt;此外，如果list中带有list，list的拷贝就涉及了深拷贝和浅拷贝的知识点。不过这次先不考虑这个。还没到需要写list中带list的代码。用到了再学吧。&lt;/p&gt;
</description>
				
				<pubDate>Tue, 27 Feb 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/python-copy-list</link>
				<guid isPermaLink="true">http://localhost:4000/python-copy-list</guid>
			</item>
			
		
			
			<item>
				<title>pass</title>
				
					<description>&lt;p&gt;python就是个pass
c语言就是个;&lt;/p&gt;
</description>
				
				<pubDate>Sat, 01 Jan 2011 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/test1-test2-test3</link>
				<guid isPermaLink="true">http://localhost:4000/test1-test2-test3</guid>
			</item>
			
		
			
			<item>
				<title>pass</title>
				
					<description>&lt;p&gt;python就是个pass
c语言就是个;&lt;/p&gt;
</description>
				
				<pubDate>Sat, 01 Jan 2011 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/test1-test2-test3</link>
				<guid isPermaLink="true">http://localhost:4000/test1-test2-test3</guid>
			</item>
			
		
	</channel>
</rss>

